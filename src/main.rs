#[macro_use]
extern crate serde_json;
#[macro_use]
extern crate serde;
use serde::{Serialize, Deserialize};
use std::env;
use std::{io::Read, fs, fs::read_dir};
use std::process::exit;
use anvil_region::AnvilChunkProvider;
use clap::{Arg, App, SubCommand};

use nbt::Result;
use nbt::Blob;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PacketChunk {
    x: f64,
    z: f64,
    groundUp: bool,
    bitMap: i64,
    heightmaps: serde_json::Value,
    biomes: Vec<i64>,
    chunkData: ChunkData,
    blockEntities: Vec<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "type")]
pub enum ChunkData {
    Buffer {
        data: Vec<i32>,
    }
}

fn run(input: &str, output: &str) -> Result<()> {
    let chunk_provider = AnvilChunkProvider::new(&output);
    let reader = std::fs::read_dir(input)?;
    for entry in reader {
        if let Some(entry) = entry.ok()
            .and_then(|entry| std::fs::OpenOptions::new().read(true).open(entry.path()).ok())
            .and_then(|mut file| {
                let mut st = String::new();
                file.read_to_string(&mut st).ok()?;
                Some(st)
            })
            .and_then(|e| serde_json::from_str(&e).ok())
        {
            let chunk: PacketChunk = entry;
            println!("{} {}", chunk.x, chunk.z);
        }
    }
    Ok(())
}

fn main() {
    let matches = App::new("dump-to-map")
        .arg(
            Arg::with_name("output")
                .help("A valide minecraft 1.15 world that will be patched")
                .short("o")
                .required(true)
                .takes_value(true)
        )
        .arg(
            Arg::with_name("input")
                .help("A directory containing JOSN chunk dump generated by cort2bot")
                .short("i")
                .required(true)
                .takes_value(true)
        )
        .get_matches();
    let output = matches.value_of("output").unwrap();
    let input = matches.value_of("input").unwrap();
    if let Err(e) = run(input, output) {
        eprintln!("{}", e);
    }
}
